;#!/usr/local/bin/java -cp /home/ni/src/jnil org.jnil.Jnil

;(setq *trace-eval* t)

(fset 'princ-to-string #'princs)
(fset 'eqv #'eql)

(defun testcmp (name form value)
  "Run the test called NAME and print the result.
The test is successfull if the printed representations of
the evaluation of FORM and VALUE are equal."
  (let ((label (princ-to-string name))
        (result (errset (eval form)))
        (target (princ-to-string value)))
    (let ((resultvalue (princ-to-string (car result))))
      (if (atom result)
          (progn (princf "Test FAIL: %s RAISED ERROR: %s\n" label *last-error*)
                 (setq fails (cons label fails)))
        (if (eqv resultvalue target)
            (princf "Test pass: %s\t%s\n" label resultvalue)
          (princf "Test FAIL: %s\n calculated: %s\n   expected: %s\n"
                  label resultvalue value)
          (setq fails (cons label fails)))))))

(setq fails nil)

(testcmp 'testcmp ''lala "lala")

(testcmp "print string" '(print "dubidubidu?") "dubidubidu?")
(testcmp "print symbol" '(print 'a) 'a)
(testcmp "print number" '(print 3.1415926589793) 3.1415926589793)
(testcmp "print cons" '(print (cons (cons 3 4) nil)) "((3 . 4))")
(testcmp "print-to-string string" '(print-to-string "lala2") "\"lala2\"")
(testcmp "print-to-string number" '(print-to-string 3) "3")
(testcmp "print-to-string symbol" '(print-to-string 'sisismi) 'sisismi)
(testcmp "print-to-string cons" '(print-to-string (cons (cons 5 6) nil)) "((5 . 6))")
(testcmp "progn 0" '(progn) nil)
(testcmp "progn 1" '(progn 3) 3)
(testcmp "progn 1a" '(progn (car (cdr '(z x y)))) "x")
(testcmp "progn 2" '(progn (car (cdr '(z x y)))
                          19) "19")
(testcmp "progn 3" '(progn (car (cdr '(z x y)))
                          19
                          (cons (cons 17 4) nil)) "((17 . 4))")
(testcmp "- 1" '(- 3) "-3")
(testcmp "- 2" '(- 3 2) "1")
(testcmp "- 3" '(- 13 4 5) "4")
(testcmp "/ 1a" '(/ 1) "1")
(testcmp "/ 1b" '(/ 2.0) "0.5")
(testcmp "/ 2" '(/ 6 5.0) "1.2")
(testcmp "/ 3" '(/ 12 2 3) "2")
(testcmp "/ 4" '(/ 64 2 2 2) "8")
(testcmp "+ 0" '(+) "0")
(testcmp "+ 1" '(+ 3.3) "3.3")
(testcmp "+ 2" '(+ 2 3) "5")
(testcmp "+ 2a" '(+ 2.4 3) "5.4")
(testcmp "+ 2b" '(+ 2 3.4) "5.4")
(testcmp "+ 2c" '(+ 2.0 3.4) "5.4")
(testcmp "+ 3" '(+ 3 34 56) "93")
(testcmp "+ 4" '(+ 4 16 64 256) "340")
(testcmp "* 0" '(*) "1")
(testcmp "* 1" '(* 22.3) "22.3")
(testcmp "* 2" '(* 3 4) "12")
(testcmp "* 2a" '(* 3.0 4) "12.0")
(testcmp "* 2b" '(* 3 4.0) "12.0")
(testcmp "* 2c" '(* 3.0 4.0) "12.0")
(testcmp "* 3" '(* 1 2 3) "6")
(testcmp "* 7" '(* 1 2 3 4 5 6 7) "5040")
(testcmp "let" '(let ((a 3)
                      (b 4))
                  (let ((a b)
                        (b a))
                    (cons a b)))
         "(4 . 3)")
(testcmp "let*" '(let ((a 3)
                       (b 4))
                   (let* ((a b)
                          (b a))
                     (cons a b)))
         "(4 . 4)")
(testcmp "flet" '(flet((fac (lambda (n)
                              (flet ((fac (lambda (n acc)
                                            (if (zerop n)
                                                acc
                                              (fac (- n 1) (* n acc))))))
                                (fac n 1)))))
                   (fac 7))
         5040)
(testcmp "rplaca" '(let (( a '(4 . 5))) (rplaca a 6) a) "(6 . 5)")
(testcmp "rplacd" '(let ((cc '(lala . gugu))) (rplacd cc nil) cc) "(lala)")
(testcmp "eval" '(eval '(+ 3 (let ((a '(3 4))) (car (cdr a))))) "7")
(testcmp "if nil" '(let ((a '(c d))) (if nil (car a) (cdr a))) "(d)")
(testcmp "if t" '(let ((a '(c d))) (if t (car a) (cdr a))) "c")
(testcmp "setq" '(let ((a '(c d))) (setq a 19) a) "19")
(testcmp "atom nil" '(atom nil) "t")
(testcmp "atom t" '(atom t) "t")
(testcmp "atom number" '(atom 13) "t")
(testcmp "atom string" '(atom "aa") "t")
(testcmp "atom char" '(atom ?4) "t")
(testcmp "atom cons" '(atom '(nil)) "nil")
(testcmp "car cons" '(car '(a . b)) "a")
(testcmp "car nil" '(car nil) "nil")
(testcmp "car list" '(car '(a b)) "a")
(testcmp "car string" '(errset (car "'(a . b)")) "nil")
(testcmp "cdr cons" '(cdr '(a . b)) "b")
(testcmp "cdr nil" '(cdr nil) "nil")
(testcmp "cdr list" '(cdr '(a b)) "(b)")
(testcmp "cdr string" '(errset (cdr "'(a . b)")) "nil")
(testcmp "cons" '(cons 4 5) "(4 . 5)")
(testcmp "eq y" '(let ((a 'huhu) (b 'huhu)) (eq a b)) "t")
(testcmp "eq n" '(let ((a "huhu") (b "huhu")) (eq a b)) "nil")
(testcmp "eqv y" '(let ((a 'huhu) (b 'huhu)) (eqv a b)) "t")
(testcmp "eqv n" '(let ((a "huhu") (b "huhu")) (eqv a b)) "t")
(testcmp "eqv l" '(let ((a '(lala)) (b '(lala))) (eqv a b)) "nil")
(testcmp "fset" '(progn (fset 'fooo (lambda (n) (+ n n)))
                        (fooo 34))
         "68")
(testcmp "lambda 1" '(lambda) "(lambda)")
(testcmp "lambda 2" '(lambda 3) "(lambda 3)")
(testcmp "lambda 3" '(lambda (n) (+ 3 n)) "(lambda (n) (+ 3 n))")
(testcmp "defun" '(progn (defun lala (n) (* n n))
                         (lala 123))
         "15129")
(testcmp "defspecial" '(progn (defspecial quote-eval (toquote toeval)
                                (cons toquote (eval toeval)))
                              (quote-eval (* 3 3) (* 4 4)))
         "((* 3 3) . 16)")
(testcmp "quote" '(quote lala) "lala")
(testcmp "while" '(let (a
                        (b '(2 3 5 7 11 13 17 19 23 29)))
                    (while b
                      (setq a (cons (car b) a))
                      (setq b (cdr b)))
                    (length a))
         "10")
(testcmp "zerop 0" '(zerop (- 3 3)) "t")
(testcmp "zerop 0.0" '(zerop (- 3.4 3.4)) "t")
(testcmp "zerop !0" '(zerop (- 3 3.4)) "nil")
(testcmp "describe" '(describe 'newsymbol) "(\"newsymbol\" nil nil {})")
(testcmp "null" '(null (null 'a)) "t")
(testcmp "not" '(not (not 'a)) "t")
(testcmp "load t" '(load "lib/test-helper1.lisp") "t")
(testcmp "load nil" '(load "lib/test-helper2.lisp") "nil")
(testcmp "princ" '(princ 'lala) "lala")
(testcmp "terpri" '(terpri) "t")
(testcmp "typeof symbol" '(typeof 'a) "symbol")
(testcmp "typeof cons" '(typeof (lambda)) "cons")
(testcmp "typeof fixnum" '(typeof 34444) "fixnum")
(testcmp "typeof flonum" '(typeof 34.444) "flonum")
(testcmp "typeof t" '(typeof t) "symbol")
(testcmp "typeof nil" '(typeof nil) "symbol")
;(testcmp "typeof map" '(typeof {}) "map")
;(testcmp "typeof array" '(typeof []) "array")
(testcmp "typeof string" '(typeof "") "string")
(testcmp "princ-to-string" '(princ-to-string (list (* 3 4) t)) "(12 t)")
(testcmp "mapcar 1" '(mapcar 'zerop '(0 1 2 3 0 4 5 0)) "(t nil nil nil t nil nil t)")
(testcmp "mapcar 2" '(mapcar (lambda (n) (+ n 1))
                             '(0 1 2 3 0 4 5 0)) "(1 2 3 4 1 5 6 1)")
(testcmp "funcall" '(funcall '* 1 2 3 4 5 6 7) 5040)
(testcmp "apply" '(apply '* '(1 2 3 4 5 6 7)) 5040)
(testcmp "identity" '(identity 'lalala) 'lalala)
(testcmp "ignore 0" '(ignore) nil)
(testcmp "ignore 1" '(ignore 1) nil)
(testcmp "ignore 2" '(ignore 1 2) nil)

(defun opt1 (&optional laber fasel)
  (list laber fasel))
(testcmp "&optional 1" '(opt1) "(nil nil)")
(testcmp "&optional 2" '(opt1 3) "(3 nil)")
(testcmp "&optional 3" '(opt1 3 4) "(3 4)")
(testcmp "&optional 4" '(errset (opt1 3 4 5)) "nil")

(defun opt2 (blubber &optional laber fasel)
  (list blubber laber fasel))
(testcmp "&optional 5" '(errset (opt2)) nil)
(testcmp "&optional 6" '(opt2 5) "(5 nil nil)")
(testcmp "&optional 7" '(opt2 5 6) "(5 6 nil)")
(testcmp "&optional 8" '(opt2 5 6 7) "(5 6 7)")
(testcmp "&optional 9" '(errset (opt2 5 6 7 8)) nil)

(defun opt3 (blubber &optional laber fasel &rest noch)
  (list blubber laber fasel noch))
(testcmp "&rest 1" '(errset (opt2)) nil)
(testcmp "&rest 2" '(opt3 5) "(5 nil nil nil)")
(testcmp "&rest 3" '(opt3 5 6) "(5 6 nil nil)")
(testcmp "&rest 4" '(opt3 5 6 7) "(5 6 7 nil)")
(testcmp "&rest 5" '(opt3 5 6 7 8) "(5 6 7 (8))")
(testcmp "&rest 6" '(opt3 5 6 7 8 9) "(5 6 7 (8 9))")

(defun opt4 (blubber &rest noch)
  (list blubber noch))
(testcmp "&rest 7" '(errset (opt2)) nil)
(testcmp "&rest 8" '(opt4 5) "(5 nil)")
(testcmp "&rest 9" '(opt4 5 6) "(5 (6))")
(testcmp "&rest 10" '(opt4 5 6 7) "(5 (6 7))")

(defun opt5 (&rest noch)
  noch)
(testcmp "&rest 11" '(opt5) nil)
(testcmp "&rest 12" '(opt5 5) "(5)")
(testcmp "&rest 13" '(opt5 5 6) "(5 6)")

(testcmp "makunbound b" '(errset (let ((a 13))
                                   (makunbound 'b)
                                   a))
         '(13))
(testcmp "makunbound a" '(errset (let ((a 13))
                                   (makunbound 'a)
                                   a))
         nil)
(testcmp "fmakunbound a" '(errset (flet ((b (lambda (n) (* n n))))
                                    (fmakunbound 'a)
                                    (b 13)))
         '(169))
(testcmp "fmakunbound a" '(errset (flet ((b (lambda (n) (* n n))))
                                    (fmakunbound 'b)
                                    (b 13)))
         nil)
(testcmp "fset" '(progn (fset 'dfdf (lambda (n) (+ n 13)))
                        (dfdf 22))
         35)
(testcmp "symbol-function" '(progn (fset 'mal (symbol-function '*))
                                   (* 1 2 3 4 5 6 7))
         5040)
(testcmp "error" '(progn (errset (error "lala %s" (+ 3 4)))
                         (car (split-string *last-error* "\n")))
         "lala 7")
(testcmp "split-string 1" '(split-string "/Users/ni/src/jnil/lib"
                                         "/")
         '("" "Users" "ni" "src" "jnil" "lib"))
(testcmp "split-string 2" '(split-string "take me to the matador")
         '("take" "me" "to" "the" "matador"))
(testcmp "split-string 3" '(split-string "/Users/ni/src/jnil/lib"
                                         "/" t)
         '("Users" "ni" "src" "jnil" "lib"))

(testcmp "elt -1a" '(errset (elt "lala" -1)) nil)
(testcmp "elt -1b" '(errset (elt '(a b c d) -1)) nil)
(testcmp "elt 0a" '(elt "lala" 0) ?l)
(testcmp "elt 0b" '(elt '(a b c d) 0) 'a)
(testcmp "elt 3a" '(elt "lila" 3) ?a)
(testcmp "elt 3b" '(elt '(a b c d) 3) 'd)
(testcmp "elt 4a" '(errset (elt "lila" 4)) nil)
(testcmp "elt 4b" '(errset (elt '(a b c d) 4)) nil)

; split-string
; replace-in-string
; substring


(princ (format "%d FAILS:" (length fails)))
(let ((errors (nreverse fails)))
  (while errors
    (princf " \"%s\"" (car errors))
    (setq errors (cdr errors))))
  (terpri)
(null fails)
